services:
  web:
    build: .
    container_name: django_ecommerce_web
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - static_data:/app/staticfiles/staticfiles_build 
      - media:/app/media

    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - postgres
  db:
    image: postgres:15
    container_name: ecommerce_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}        # Uses environment variable from Render
      POSTGRES_USER: ${POSTGRES_USER}    # Uses environment variable from Render
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Uses environment variable from Render
      PGDATA: /data/postgres
    volumes:
      - ./volume/postgres:/data/postgres
    networks:
      - postgres


  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_data:/app/staticfiles/staticfiles_build 
      - media:/app/media
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - web
    networks:
      - postgres


  db_backup:
    image: postgres:15
    container_name: ecommerce_db_backup
    depends_on:
      - db
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./db_backups:/backups   # Where backups are stored
    entrypoint: >
      bash -c "
      while true; do
        echo 'Starting backup...';
        pg_dump -h db -U $POSTGRES_USER $POSTGRES_DB | gzip > /backups/$(date +%F_%H-%M-%S).sql.gz;
        echo 'Backup complete';
        ls -tp /backups/*.sql.gz | grep -v '/$' | tail -n +8 | xargs -r rm --;
        sleep 86400;
      done"
    networks:
      - postgres


volumes:
  pgdata:
  static_data:
  media:



networks:
    postgres:
      driver: bridge

